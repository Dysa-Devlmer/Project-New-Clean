/**
 * DYSA Point Server - Refactorizado para usar app.js
 * Servidor HTTP que usa la aplicaci√≥n Express desde app.js
 * Fecha: 19 de Octubre 2025
 */

const http = require('http');
const app = require('./app'); // ‚¨ÖÔ∏è usa app.js
const { testConnection } = require('./config/database');

// Header para identificar instancia en pruebas
app.use((req, res, next) => {
    res.set('X-App', 'dysa-backend');
    next();
});

// Configuraci√≥n del puerto
const PORT = process.env.PORT || 8547;

// Funci√≥n para iniciar el servidor
async function iniciarServidor() {
    try {
        // Verificar conexi√≥n a base de datos
        console.log('\nüîç Verificando conexi√≥n a base de datos...');
        const dbConnected = await testConnection();

        if (!dbConnected) {
            console.error('\n‚ö†Ô∏è  ADVERTENCIA: No se pudo conectar a la base de datos');
            console.error('   El servidor iniciar√° pero no funcionar√° correctamente');
            console.error('   Verifique la configuraci√≥n en el archivo .env\n');
        }

        // Crear servidor HTTP
        const server = http.createServer(app);

        // Iniciar servidor
        server.listen(PORT, '0.0.0.0', () => {
            console.log('\n' + '='.repeat(60));
            console.log('üöÄ SERVIDOR DYSA POINT ENTERPRISE INICIADO - PRODUCCI√ìN');
            console.log('='.repeat(60));
            console.log(`   Puerto: ${PORT} ‚Üê IMPORTANTE: PUERTO ACTIVO`);
            console.log(`   Ambiente: ${process.env.NODE_ENV || 'development'}`);
            console.log(`   Base de datos: ${process.env.DB_NAME || 'dysa_point'}`);
            console.log('\nüì° Acceso desde red local:');
            console.log(`   http://localhost:${PORT}`);
            console.log(`   http://192.168.1.X:${PORT} (reemplazar X con IP real)`);
            console.log('\nüìã Endpoints principales:');
            console.log(`   GET  /health - Estado del servidor`);
            console.log(`   GET  /setup - Asistente de instalaci√≥n`);
            console.log(`   GET  /config/red - Configuraci√≥n de red`);
            console.log(`   GET  /api/sistema/health - Health check extendido`);
            console.log('='.repeat(60) + '\n');

            // Log espec√≠fico del puerto para debug
            console.log(`üöÄ Backend escuchando en http://localhost:${PORT}`);
        });

        // Guardar referencia del servidor para reinicio controlado
        app.set('http-server', server);
        app.set('http-port', PORT);
        app.set('http-host', '0.0.0.0');

    } catch (error) {
        console.error('‚ùå Error al iniciar servidor:', error);
        process.exit(1);
    }
}

// Manejo de se√±ales de cierre
process.on('SIGTERM', () => {
    console.log('\n‚ö†Ô∏è  Se√±al SIGTERM recibida. Cerrando servidor...');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('\n\n‚ö†Ô∏è  Se√±al SIGINT recibida. Cerrando servidor...');
    process.exit(0);
});

// Exportar aplicaci√≥n para reinicio controlado
module.exports = { server: app };

// Iniciar servidor
iniciarServidor();