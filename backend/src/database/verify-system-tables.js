/**
 * DYSA Point - Verificaci√≥n de Tablas del Sistema
 * Script para verificar las nuevas tablas de configuraci√≥n de red e instalaci√≥n
 * Fecha: 19 de Octubre 2025
 */

const { pool } = require('../config/database');

async function verifySystemTables() {
  console.log('üîç VERIFICANDO NUEVAS TABLAS DEL SISTEMA DE CONFIGURACI√ìN\n');

  try {
    // Verificar tablas del sistema
    const systemTables = [
      'sistema_red',
      'sistema_instalacion',
      'restaurante_duenio',
      'restaurante_sucursal',
      'sistema_logs_config'
    ];

    console.log('=== VERIFICACI√ìN DE TABLAS ===');
    for (const table of systemTables) {
      try {
        const [rows] = await pool.execute(`SHOW TABLES LIKE '${table}'`);
        if (rows.length > 0) {
          console.log(`‚úÖ ${table}`);

          // Mostrar cantidad de registros
          const [count] = await pool.execute(`SELECT COUNT(*) as total FROM ${table}`);
          console.log(`   üìä ${count[0].total} registros`);
        } else {
          console.log(`‚ùå ${table} - NO EXISTE`);
        }
      } catch (error) {
        console.log(`‚ùå ${table} - ERROR: ${error.message}`);
      }
    }

    // Verificar datos espec√≠ficos
    console.log('\n=== VERIFICACI√ìN DE DATOS INICIALES ===');

    // Configuraci√≥n de red
    try {
      const [networkConfig] = await pool.execute(`
        SELECT host_principal, puerto_api, ssl_activo, activo
        FROM sistema_red
        WHERE activo = 1
        LIMIT 1
      `);

      if (networkConfig.length > 0) {
        const config = networkConfig[0];
        console.log('üåê CONFIGURACI√ìN DE RED:');
        console.log(`   Host: ${config.host_principal}`);
        console.log(`   Puerto API: ${config.puerto_api}`);
        console.log(`   SSL: ${config.ssl_activo ? 'Activo' : 'Inactivo'}`);
      } else {
        console.log('‚ùå No hay configuraci√≥n de red activa');
      }
    } catch (error) {
      console.log(`‚ùå Error al verificar configuraci√≥n de red: ${error.message}`);
    }

    // Estado de instalaci√≥n
    try {
      const [installStatus] = await pool.execute(`
        SELECT instalado, version_instalada, pasos_completados
        FROM sistema_instalacion
        LIMIT 1
      `);

      if (installStatus.length > 0) {
        const status = installStatus[0];
        console.log('\nüîß ESTADO DE INSTALACI√ìN:');
        console.log(`   Instalado: ${status.instalado ? 'S√ç' : 'NO'}`);
        console.log(`   Versi√≥n: ${status.version_instalada}`);
        console.log(`   Pasos: ${status.pasos_completados}`);
      } else {
        console.log('‚ùå No hay registro de estado de instalaci√≥n');
      }
    } catch (error) {
      console.log(`‚ùå Error al verificar estado de instalaci√≥n: ${error.message}`);
    }

    // Informaci√≥n del due√±o
    try {
      const [owner] = await pool.execute(`
        SELECT nombre_completo, rut_nif, telefono, ciudad
        FROM restaurante_duenio
        WHERE activo = 1
        LIMIT 1
      `);

      if (owner.length > 0) {
        const duenio = owner[0];
        console.log('\nüë§ INFORMACI√ìN DEL DUE√ëO:');
        console.log(`   Nombre: ${duenio.nombre_completo}`);
        console.log(`   RUT/NIF: ${duenio.rut_nif}`);
        console.log(`   Tel√©fono: ${duenio.telefono}`);
        console.log(`   Ciudad: ${duenio.ciudad}`);
      } else {
        console.log('‚ùå No hay informaci√≥n del due√±o registrada');
      }
    } catch (error) {
      console.log(`‚ùå Error al verificar informaci√≥n del due√±o: ${error.message}`);
    }

    // Sucursales
    try {
      const [branches] = await pool.execute(`
        SELECT COUNT(*) as total,
               SUM(es_principal) as principales,
               SUM(activo) as activas
        FROM restaurante_sucursal
      `);

      if (branches.length > 0) {
        const stats = branches[0];
        console.log('\nüè™ SUCURSALES:');
        console.log(`   Total: ${stats.total}`);
        console.log(`   Principales: ${stats.principales}`);
        console.log(`   Activas: ${stats.activas}`);
      } else {
        console.log('‚ùå No hay sucursales registradas');
      }
    } catch (error) {
      console.log(`‚ùå Error al verificar sucursales: ${error.message}`);
    }

    console.log('\n‚úÖ Verificaci√≥n completada');

  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  } finally {
    process.exit(0);
  }
}

// Ejecutar verificaci√≥n
verifySystemTables();