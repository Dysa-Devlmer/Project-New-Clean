/**
 * DYSA Point POS v2.0.14 - Sistema de Documentaci√≥n T√©cnica para Restaurantes
 *
 * Sistema empresarial de generaci√≥n autom√°tica de documentaci√≥n t√©cnica,
 * manuales de usuario, gu√≠as de configuraci√≥n y procedimientos operativos
 * para facilitar el despliegue y operaci√≥n en restaurantes profesionales.
 *
 * Caracter√≠sticas Empresariales:
 * - Generaci√≥n autom√°tica de documentaci√≥n seg√∫n tipo de restaurante
 * - Manuales de usuario interactivos con capturas de pantalla
 * - Gu√≠as de instalaci√≥n paso a paso para t√©cnicos
 * - Procedimientos de operaci√≥n diaria para personal del restaurante
 * - Documentaci√≥n de APIs para desarrolladores
 * - Troubleshooting autom√°tico con soluciones
 * - Plantillas personalizables por marca/restaurante
 * - Exportaci√≥n a m√∫ltiples formatos (PDF, HTML, Markdown)
 * - Versionado autom√°tico de documentaci√≥n
 * - Localizaci√≥n multiidioma
 */

const EventEmitter = require('events');
const fs = require('fs').promises;
const path = require('path');
const os = require('os');
const puppeteer = require('puppeteer');
const archiver = require('archiver');
const marked = require('marked');

class DocumentacionTecnicaManager extends EventEmitter {
    constructor(database) {
        super();
        this.database = database;
        this.configPath = path.join(__dirname, '..', '..', 'config');
        this.docsPath = path.join(__dirname, '..', '..', 'documentacion');
        this.templatesPath = path.join(__dirname, '..', '..', 'templates', 'documentacion');
        this.outputPath = path.join(__dirname, '..', '..', 'docs-generados');

        // Configuraci√≥n de documentaci√≥n empresarial
        this.configuracion = {
            idiomas: ['es', 'en', 'pt'],
            formatos: ['pdf', 'html', 'markdown', 'word'],
            tipos_restaurante: ['casual', 'fino', 'rapido', 'bar', 'cafeteria'],
            plantillas: new Map(),
            cache: new Map(),
            versionado: true,
            incluir_screenshots: true,
            incluir_diagramas: true
        };

        // Tipos de documentaci√≥n disponibles
        this.tiposDocumentacion = {
            'manual-usuario': {
                nombre: 'Manual de Usuario',
                descripcion: 'Gu√≠a completa para operadores del sistema',
                audiencia: 'personal_restaurante',
                prioridad: 1
            },
            'guia-instalacion': {
                nombre: 'Gu√≠a de Instalaci√≥n',
                descripcion: 'Instrucciones t√©cnicas de instalaci√≥n y configuraci√≥n',
                audiencia: 'tecnicos',
                prioridad: 2
            },
            'procedimientos-operativos': {
                nombre: 'Procedimientos Operativos Est√°ndar',
                descripcion: 'Procedimientos diarios de operaci√≥n del restaurante',
                audiencia: 'gerencia',
                prioridad: 3
            },
            'api-documentation': {
                nombre: 'Documentaci√≥n de APIs',
                descripcion: 'Referencias t√©cnicas para desarrolladores',
                audiencia: 'desarrolladores',
                prioridad: 4
            },
            'troubleshooting': {
                nombre: 'Gu√≠a de Resoluci√≥n de Problemas',
                descripcion: 'Soluciones a problemas comunes',
                audiencia: 'soporte_tecnico',
                prioridad: 5
            },
            'configuracion-avanzada': {
                nombre: 'Configuraci√≥n Avanzada',
                descripcion: 'Configuraciones especializadas por tipo de restaurante',
                audiencia: 'administradores',
                prioridad: 6
            }
        };

        this.plantillasBase = {
            header: `
# DYSA Point POS v2.0.14 - {titulo}
## Sistema de Punto de Venta Empresarial para Restaurantes

**Fecha de Generaci√≥n**: {fecha}
**Versi√≥n del Sistema**: v2.0.14
**Tipo de Restaurante**: {tipo_restaurante}
**Idioma**: {idioma}

---
`,
            footer: `
---

## Soporte T√©cnico

Para soporte t√©cnico especializado:
- **Email**: soporte@dysapoint.com
- **Tel√©fono**: +56 2 2345 6789
- **Horario**: Lunes a Domingo 8:00 - 22:00

## Informaci√≥n del Sistema

- **Versi√≥n**: DYSA Point POS v2.0.14
- **Tipo**: Sistema Empresarial
- **Compatibilidad**: Windows 10+, Linux Ubuntu 18+
- **Base de Datos**: MySQL 8.0+
- **Navegador**: Chrome 90+, Firefox 88+

*Documentaci√≥n generada autom√°ticamente por DYSA Point POS*
`
        };

        this.inicializar();
    }

    async inicializar() {
        try {
            console.log('üîß Inicializando DocumentacionTecnicaManager...');

            // Crear directorios necesarios
            await this.crearDirectorios();

            // Cargar configuraci√≥n de documentaci√≥n
            await this.cargarConfiguracion();

            // Cargar plantillas base
            await this.cargarPlantillas();

            // Verificar dependencias
            await this.verificarDependencias();

            console.log('‚úÖ DocumentacionTecnicaManager inicializado correctamente');
            this.emit('sistema-inicializado', { timestamp: new Date() });

        } catch (error) {
            console.error('‚ùå Error inicializando DocumentacionTecnicaManager:', error);
            this.emit('error-inicializacion', { error, timestamp: new Date() });
            throw error;
        }
    }

    async crearDirectorios() {
        const directorios = [
            this.docsPath,
            this.templatesPath,
            this.outputPath,
            path.join(this.outputPath, 'pdf'),
            path.join(this.outputPath, 'html'),
            path.join(this.outputPath, 'markdown'),
            path.join(this.outputPath, 'screenshots'),
            path.join(this.outputPath, 'diagramas'),
            path.join(this.outputPath, 'paquetes')
        ];

        for (const directorio of directorios) {
            try {
                await fs.mkdir(directorio, { recursive: true });
            } catch (error) {
                if (error.code !== 'EEXIST') {
                    throw error;
                }
            }
        }
    }

    async cargarConfiguracion() {
        const configFile = path.join(this.configPath, 'documentacion-config.json');

        try {
            const configData = await fs.readFile(configFile, 'utf8');
            const config = JSON.parse(configData);
            this.configuracion = { ...this.configuracion, ...config };
        } catch (error) {
            // Si no existe config, usar valores por defecto y crear archivo
            await this.guardarConfiguracion();
        }
    }

    async guardarConfiguracion() {
        const configFile = path.join(this.configPath, 'documentacion-config.json');
        await fs.writeFile(configFile, JSON.stringify(this.configuracion, null, 2));
    }

    async cargarPlantillas() {
        const tiposDocumentacion = Object.keys(this.tiposDocumentacion);

        for (const tipo of tiposDocumentacion) {
            try {
                const templateFile = path.join(this.templatesPath, `${tipo}.md`);
                const contenido = await fs.readFile(templateFile, 'utf8');
                this.plantillasBase[tipo] = contenido;
            } catch (error) {
                // Si no existe plantilla, crear una b√°sica
                await this.crearPlantillaBasica(tipo);
            }
        }
    }

    async crearPlantillaBasica(tipo) {
        const info = this.tiposDocumentacion[tipo];
        const plantilla = `# ${info.nombre}

## Descripci√≥n
${info.descripcion}

## Audiencia
${info.audiencia}

## Contenido

{contenido_principal}

## Procedimientos

{procedimientos}

## Troubleshooting

{troubleshooting}
`;

        const templateFile = path.join(this.templatesPath, `${tipo}.md`);
        await fs.writeFile(templateFile, plantilla);
        this.plantillasBase[tipo] = plantilla;
    }

    async verificarDependencias() {
        try {
            // Verificar puppeteer para generaci√≥n de PDFs
            const browser = await puppeteer.launch({ headless: true });
            await browser.close();
        } catch (error) {
            console.warn('‚ö†Ô∏è Puppeteer no disponible, PDFs no se podr√°n generar');
        }
    }

    async generarDocumentacionCompleta(options = {}) {
        const startTime = Date.now();
        console.log('üìö Iniciando generaci√≥n de documentaci√≥n completa...');

        try {
            const configuracion = {
                tipo_restaurante: 'casual',
                idioma: 'es',
                formatos: ['pdf', 'html', 'markdown'],
                incluir_screenshots: true,
                incluir_diagramas: true,
                personalizar_marca: false,
                ...options
            };

            const resultados = {
                documentos_generados: [],
                screenshots_capturadas: 0,
                diagramas_creados: 0,
                formatos_exportados: [],
                tiempo_total: 0,
                errores: []
            };

            // Generar cada tipo de documentaci√≥n
            for (const [tipoId, tipoInfo] of Object.entries(this.tiposDocumentacion)) {
                try {
                    console.log(`üìÑ Generando ${tipoInfo.nombre}...`);

                    const documento = await this.generarDocumento(tipoId, configuracion);
                    resultados.documentos_generados.push(documento);

                    // Generar en todos los formatos solicitados
                    for (const formato of configuracion.formatos) {
                        await this.exportarDocumento(documento, formato, configuracion);
                        if (!resultados.formatos_exportados.includes(formato)) {
                            resultados.formatos_exportados.push(formato);
                        }
                    }

                } catch (error) {
                    console.error(`‚ùå Error generando ${tipoInfo.nombre}:`, error);
                    resultados.errores.push({
                        tipo: tipoId,
                        error: error.message
                    });
                }
            }

            // Generar screenshots si est√° habilitado
            if (configuracion.incluir_screenshots) {
                console.log('üì∏ Capturando screenshots del sistema...');
                resultados.screenshots_capturadas = await this.generarScreenshots(configuracion);
            }

            // Generar diagramas si est√° habilitado
            if (configuracion.incluir_diagramas) {
                console.log('üìä Generando diagramas de arquitectura...');
                resultados.diagramas_creados = await this.generarDiagramas(configuracion);
            }

            // Crear paquete completo de documentaci√≥n
            const paqueteFile = await this.crearPaqueteDocumentacion(configuracion, resultados);

            resultados.tiempo_total = Date.now() - startTime;
            resultados.paquete_generado = paqueteFile;

            console.log('‚úÖ Documentaci√≥n completa generada exitosamente');
            console.log(`üìä Documentos: ${resultados.documentos_generados.length}`);
            console.log(`üì∏ Screenshots: ${resultados.screenshots_capturadas}`);
            console.log(`üìä Diagramas: ${resultados.diagramas_creados}`);
            console.log(`‚è±Ô∏è Tiempo total: ${Math.round(resultados.tiempo_total / 1000)}s`);

            this.emit('documentacion-generada', { configuracion, resultados });
            return resultados;

        } catch (error) {
            console.error('‚ùå Error generando documentaci√≥n completa:', error);
            this.emit('error-generacion', { error, options });
            throw error;
        }
    }

    async generarDocumento(tipo, configuracion) {
        const tipoInfo = this.tiposDocumentacion[tipo];
        if (!tipoInfo) {
            throw new Error(`Tipo de documentaci√≥n no v√°lido: ${tipo}`);
        }

        // Obtener contenido espec√≠fico seg√∫n el tipo
        let contenido = '';
        switch (tipo) {
            case 'manual-usuario':
                contenido = await this.generarManualUsuario(configuracion);
                break;
            case 'guia-instalacion':
                contenido = await this.generarGuiaInstalacion(configuracion);
                break;
            case 'procedimientos-operativos':
                contenido = await this.generarProcedimientosOperativos(configuracion);
                break;
            case 'api-documentation':
                contenido = await this.generarDocumentacionAPI(configuracion);
                break;
            case 'troubleshooting':
                contenido = await this.generarTroubleshooting(configuracion);
                break;
            case 'configuracion-avanzada':
                contenido = await this.generarConfiguracionAvanzada(configuracion);
                break;
        }

        // Aplicar plantilla y reemplazar variables
        const documento = {
            id: `${tipo}-${Date.now()}`,
            tipo,
            titulo: tipoInfo.nombre,
            contenido: await this.aplicarPlantilla(contenido, configuracion, tipoInfo),
            configuracion,
            fecha_generacion: new Date(),
            version: '2.0.14'
        };

        return documento;
    }

    async generarManualUsuario(configuracion) {
        return `
## Introducci√≥n al Sistema

DYSA Point POS es un sistema integral de punto de venta dise√±ado espec√≠ficamente para restaurantes ${configuracion.tipo_restaurante}.
Este manual le guiar√° atrav√©s de todas las funcionalidades principales del sistema.

## Inicio de Sesi√≥n

### Para Personal de Servicio (Garzones)
1. Acceder al sistema mediante c√≥digo personal de 4 d√≠gitos
2. El sistema validar√° autom√°ticamente los permisos
3. Acceso inmediato a funcionalidades de ventas y mesas

### Para Administradores
1. Usar email y contrase√±a corporativa
2. Acceso completo a configuraci√≥n y reportes
3. Gesti√≥n de usuarios y permisos avanzados

## Gesti√≥n de Mesas

### Abrir Mesa
1. Seleccionar mesa disponible en el mapa visual
2. Asignar n√∫mero de comensales
3. Confirmar apertura - la mesa cambiar√° a estado "Ocupada"

### Tomar Orden
1. Seleccionar productos del men√∫ digitalizado
2. Configurar opciones y complementos
3. Agregar observaciones especiales
4. Enviar orden autom√°ticamente a cocina

### Agregar Productos
1. Mesa debe estar en estado "Ocupada"
2. Seleccionar productos adicionales
3. Especificar cantidades y modificaciones
4. Confirmar env√≠o a cocina

### Cerrar Mesa y Cobrar
1. Revisar total de la cuenta
2. Seleccionar m√©todo de pago (efectivo, tarjeta, transferencia)
3. Procesar pago
4. Generar boleta/factura autom√°tica
5. Mesa retorna a estado "Disponible"

## Sistema de Cocina por Bloques

### Bloques de Tiempo
- **Bloque 1**: 11:00 - 14:00 (Almuerzo)
- **Bloque 2**: 14:00 - 17:00 (Once)
- **Bloque 3**: 17:00 - 20:00 (Cena temprana)
- **Bloque 4**: 20:00 - 23:00 (Cena tard√≠a)

### Gesti√≥n de √ìrdenes
1. √ìrdenes se organizan autom√°ticamente por bloque activo
2. Priorizaci√≥n inteligente seg√∫n tiempo de espera
3. Notificaciones autom√°ticas de √≥rdenes listas
4. Tracking completo de tiempos de preparaci√≥n

## Aparcar Ventas

### Cu√°ndo Usar
- Interrupciones en el servicio
- Cambios de turno
- Problemas t√©cnicos temporales

### Procedimiento
1. Seleccionar "Aparcar Venta" en mesa activa
2. Agregar motivo del aparcar
3. Venta se guarda temporalmente
4. Recuperar cuando se resuelva la situaci√≥n

## Sistema de Pre-tickets

### Generar Pre-ticket
1. Tomar orden completa
2. Seleccionar "Generar Pre-ticket"
3. Sistema calcula total provisional
4. Cliente puede revisar y confirmar
5. Orden se env√≠a a cocina una vez confirmada

## Tarifas M√∫ltiples

### Aplicaci√≥n Autom√°tica
- **Hora Feliz**: Descuentos autom√°ticos 15:00-18:00
- **Men√∫ Ejecutivo**: Precios especiales 12:00-15:00
- **Promociones**: Aplicaci√≥n seg√∫n reglas configuradas

### Verificaci√≥n Manual
1. Revisar que tarifa aplicada sea correcta
2. Modificar si es necesario antes de cobrar
3. Sistema registra cambios para auditoria

## Reportes y Estad√≠sticas

### Reportes Diarios
- Ventas por turno y total del d√≠a
- Productos m√°s vendidos
- Rendimiento por mesero
- Tiempos promedio de servicio

### Reportes Gerenciales
- An√°lisis semanal y mensual
- Comparativas de per√≠odos
- Proyecciones de ventas
- Indicadores clave de rendimiento (KPIs)

## Troubleshooting Com√∫n

### Problema: Mesa no responde
**Soluci√≥n**: Refrescar pantalla (F5) o reiniciar sesi√≥n

### Problema: Orden no llega a cocina
**Soluci√≥n**: Verificar conexi√≥n de red, reenviar orden manualmente

### Problema: Impresora no funciona
**Soluci√≥n**: Verificar conexi√≥n USB, reiniciar impresora, contactar soporte

### Problema: Sistema lento
**Soluci√≥n**: Cerrar pesta√±as innecesarias, reiniciar navegador, verificar memoria RAM
`;
    }

    async generarGuiaInstalacion(configuracion) {
        return `
## Requisitos del Sistema

### Hardware M√≠nimo
- **Procesador**: Intel Core i3 o AMD equivalente
- **RAM**: 4 GB m√≠nimo, 8 GB recomendado
- **Almacenamiento**: 10 GB espacio libre en disco
- **Red**: Conexi√≥n Ethernet estable (WiFi como respaldo)

### Hardware Recomendado
- **Procesador**: Intel Core i5 o superior
- **RAM**: 16 GB o m√°s
- **Almacenamiento**: SSD de 250 GB
- **Red**: Conexi√≥n Gigabit Ethernet

### Software Base
- **Sistema Operativo**: Windows 10/11 o Ubuntu 18.04+
- **Base de Datos**: MySQL 8.0+
- **Navegador**: Chrome 90+ o Firefox 88+
- **Node.js**: Versi√≥n 16+

## Instalaci√≥n Automatizada

### Para Windows
1. Descargar script de instalaci√≥n: \`despliegue-produccion.bat\`
2. Ejecutar como Administrador
3. Seguir instrucciones en pantalla
4. Sistema se instalar√° autom√°ticamente

\`\`\`batch
# Comando de instalaci√≥n
despliegue-produccion.bat
\`\`\`

### Para Linux
1. Descargar script de instalaci√≥n: \`despliegue-produccion.sh\`
2. Dar permisos de ejecuci√≥n: \`chmod +x despliegue-produccion.sh\`
3. Ejecutar como root: \`sudo ./despliegue-produccion.sh\`

\`\`\`bash
# Comandos de instalaci√≥n
chmod +x despliegue-produccion.sh
sudo ./despliegue-produccion.sh
\`\`\`

## Configuraci√≥n Initial

### Configurador Autom√°tico
Despu√©s de la instalaci√≥n, ejecutar el configurador:

\`\`\`bash
node scripts/configuracion-restaurante.js
\`\`\`

### Informaci√≥n Requerida
1. **Datos del Restaurante**:
   - Nombre comercial
   - RUT/NIT
   - Direcci√≥n y contacto
   - Tipo de restaurante

2. **Configuraci√≥n de Usuario Administrador**:
   - Email corporativo
   - Contrase√±a segura (m√≠nimo 8 caracteres)
   - Nombre completo

3. **Configuraci√≥n de Base de Datos**:
   - Host MySQL (localhost por defecto)
   - Puerto (3306 por defecto)
   - Credenciales de acceso

4. **Configuraci√≥n de Mesas**:
   - N√∫mero total de mesas
   - Capacidad por mesa
   - Distribuci√≥n por zonas

## Configuraci√≥n de Red

### Firewall
Puertos que deben estar abiertos:
- **8547**: Puerto principal de la aplicaci√≥n
- **3306**: MySQL (solo acceso local)
- **80/443**: Puerto web (si se usa proxy)

### Proxy Nginx (Linux)
Sistema configura autom√°ticamente Nginx como proxy reverso:

\`\`\`nginx
server {
    listen 80;
    server_name tu-restaurante.com;

    location / {
        proxy_pass http://localhost:8547;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
\`\`\`

## Configuraci√≥n de Impresoras

### Impresoras de Comandas
1. Conectar impresora t√©rmica via USB
2. Instalar drivers del fabricante
3. Configurar en DYSA Point:
   - Ir a Configuraci√≥n > Impresoras
   - Seleccionar impresora instalada
   - Configurar como "Impresora de Comandas"

### Impresoras de Tickets
1. Configurar impresora fiscal (si aplica)
2. Configurar impresora de tickets normal
3. Asignar estaciones espec√≠ficas:
   - Cocina: Comandas de platos
   - Bar: Comandas de bebidas
   - Caja: Tickets de pago

## Backup y Mantenimiento

### Configuraci√≥n de Backup Autom√°tico
El sistema incluye backup autom√°tico cada 6 horas:

\`\`\`bash
# Verificar estado del backup
curl http://localhost:8547/api/backup/estadisticas

# Ejecutar backup manual
curl -X POST http://localhost:8547/api/backup/ejecutar
\`\`\`

### Tareas de Mantenimiento
- Limpieza autom√°tica de logs antiguos
- Rotaci√≥n de backups (retenci√≥n 30 d√≠as)
- Verificaci√≥n de integridad de base de datos
- Monitoreo de recursos del sistema

## Verificaci√≥n de Instalaci√≥n

### Health Check Completo
\`\`\`bash
# Verificar estado del sistema
curl http://localhost:8547/health

# Verificar todas las funcionalidades
node test-sistemas-produccion.js
\`\`\`

### Checklist Post-Instalaci√≥n
- [ ] Sistema responde en puerto 8547
- [ ] Base de datos conecta correctamente
- [ ] Usuario administrador puede acceder
- [ ] Mesas se muestran en el mapa visual
- [ ] Productos cargan en el men√∫
- [ ] Impresoras funcionan correctamente
- [ ] Backup autom√°tico est√° activo
- [ ] Monitoreo del sistema operativo

## Soluci√≥n de Problemas de Instalaci√≥n

### Error: Puerto 8547 ocupado
\`\`\`bash
# Verificar qu√© proceso usa el puerto
netstat -tlnp | grep 8547

# Matar proceso si es necesario
kill -9 [PID]
\`\`\`

### Error: MySQL no conecta
1. Verificar que MySQL est√© ejecut√°ndose
2. Verificar credenciales en config/database.json
3. Verificar permisos del usuario de base de datos

### Error: Falta Node.js
\`\`\`bash
# Instalar Node.js en Ubuntu
curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
sudo apt-get install -y nodejs

# Verificar instalaci√≥n
node --version
npm --version
\`\`\`
`;
    }

    async generarProcedimientosOperativos(configuracion) {
        return `
## Apertura Diaria del Sistema

### Procedimiento de Apertura (30 minutos antes del servicio)

#### 1. Verificaci√≥n del Sistema (5 minutos)
- Encender todos los equipos (POS, impresoras, router)
- Verificar conexi√≥n a internet
- Abrir navegador y acceder al sistema: http://localhost:8547
- Verificar que aparezca pantalla de login

#### 2. Apertura de Caja (10 minutos)
1. **Login como Administrador**:
   - Usar email y contrase√±a corporativa
   - Ir a m√≥dulo "Caja y Turnos"

2. **Registrar Fondo de Caja**:
   - Ingresar monto inicial en efectivo
   - Detallar denominaciones de billetes y monedas
   - Fotografiar fondo de caja (opcional)
   - Confirmar apertura

3. **Verificar M√©todos de Pago**:
   - Terminal de tarjetas funcionando
   - Conexi√≥n con banco activa
   - Aplicaciones de pago digital configuradas

#### 3. Preparaci√≥n del Servicio (15 minutos)
1. **Verificar Estado de Mesas**:
   - Todas las mesas deben aparecer "Disponibles"
   - Si hay mesas ocupadas de la noche anterior, revisar situaci√≥n
   - Limpiar historial de mesas si es necesario

2. **Verificar Men√∫ y Precios**:
   - Productos del d√≠a cargados correctamente
   - Precios actualizados seg√∫n promociones
   - Verificar disponibilidad de ingredientes

3. **Configurar Personal de Turno**:
   - Activar c√≥digos de garzones del turno
   - Asignar zonas de trabajo
   - Verificar permisos especiales si aplica

## Operaci√≥n Durante el Servicio

### Atenci√≥n de Mesas

#### Secuencia Est√°ndar de Servicio
1. **Recepci√≥n de Clientes**:
   - Seleccionar mesa disponible en mapa visual
   - Ingresar n√∫mero de comensales
   - Mesa cambia autom√°ticamente a "Ocupada"

2. **Toma de Orden**:
   - Acceder a men√∫ digitalizado
   - Seleccionar productos y cantidades
   - Configurar modificaciones y observaciones
   - Confirmar env√≠o autom√°tico a cocina

3. **Gesti√≥n de Pedidos Adicionales**:
   - Agregar productos durante el servicio
   - Sistema actualiza autom√°ticamente la cuenta
   - Nuevos items se env√≠an a cocina al confirmar

4. **Cierre y Cobro**:
   - Revisar cuenta completa con cliente
   - Seleccionar m√©todo de pago
   - Procesar transacci√≥n
   - Entregar ticket/boleta
   - Mesa vuelve a "Disponible"

### Gesti√≥n de Cocina

#### Sistema de Bloques de Tiempo
- **11:00-14:00**: Bloque 1 (Almuerzo)
- **14:00-17:00**: Bloque 2 (Once/Snacks)
- **17:00-20:00**: Bloque 3 (Cena temprana)
- **20:00-23:00**: Bloque 4 (Cena tard√≠a)

#### Procedimiento de Cocina
1. **Recepci√≥n de √ìrdenes**:
   - √ìrdenes llegan autom√°ticamente clasificadas por bloque
   - Priorizaci√≥n autom√°tica por tiempo de espera
   - Tracking de tiempos de preparaci√≥n

2. **Gesti√≥n de Preparaci√≥n**:
   - Marcar items como "En preparaci√≥n"
   - Actualizar tiempos estimados
   - Notificar cuando platos est√©n listos

3. **Comunicaci√≥n con Servicio**:
   - Sistema notifica autom√°ticamente cuando order est√° lista
   - Garzones reciben alerta en sus dispositivos
   - Tracking completo de entrega a mesa

### Situaciones Especiales

#### Aparcar Ventas
**Cu√°ndo usar**:
- Problemas t√©cnicos temporales
- Cambios de turno en mitad del servicio
- Interrupciones por emergencias

**Procedimiento**:
1. Seleccionar "Aparcar Venta" en la mesa afectada
2. Ingresar motivo del aparcar
3. Sistema guarda estado temporal
4. Recuperar venta cuando se resuelva situaci√≥n

#### Pre-tickets
**Uso recomendado**:
- Grupos grandes que desean revisar cuenta antes de pagar
- Eventos corporativos con aprobaci√≥n previa
- Servicios a domicilio con pago posterior

**Procedimiento**:
1. Completar toma de orden normalmente
2. Seleccionar "Generar Pre-ticket" antes de enviar a cocina
3. Cliente revisa y aprueba cuenta
4. Confirmar para enviar orden a cocina

#### Tarifas Especiales
**Aplicaci√≥n autom√°tica**:
- Hora feliz (15:00-18:00): Descuentos en bebidas
- Men√∫ ejecutivo (12:00-15:00): Precios especiales almuerzo
- Promociones estacionales: Seg√∫n configuraci√≥n

**Verificaci√≥n manual**:
- Revisar que tarifa aplicada sea correcta antes de cobrar
- Modificar si es necesario
- Sistema registra cambios para auditor√≠a

## Cierre Diario del Sistema

### Procedimiento de Cierre (30 minutos despu√©s del √∫ltimo cliente)

#### 1. Verificaci√≥n de Mesas (5 minutos)
- Todas las mesas deben estar "Disponibles"
- Si hay mesas abiertas, verificar situaci√≥n
- Cerrar mesas abandonadas siguiendo protocolo

#### 2. Cierre de Caja (15 minutos)
1. **Cuadre de Efectivo**:
   - Contar efectivo en caja
   - Comparar con total reportado por sistema
   - Registrar diferencias si las hay

2. **Verificaci√≥n de Pagos Electr√≥nicos**:
   - Verificar total de transacciones con tarjeta
   - Confirmar dep√≥sitos bancarios del d√≠a
   - Revisar pagos digitales (transferencias, apps)

3. **Generar Reporte de Cierre**:
   - Sistema genera autom√°ticamente reporte diario
   - Incluye ventas por producto, m√©todo de pago, garz√≥n
   - Imprimir para archivo f√≠sico

#### 3. Backup y Mantenimiento (10 minutos)
1. **Backup Manual** (opcional):
   - Sistema hace backup autom√°tico cada 6 horas
   - Ejecutar backup manual si se desea: Configuraci√≥n > Backup > Ejecutar

2. **Limpieza del Sistema**:
   - Cerrar todas las sesiones de usuario
   - Limpiar cach√© del navegador si es necesario
   - Verificar espacio en disco

3. **Preparaci√≥n para el D√≠a Siguiente**:
   - Actualizar productos del d√≠a siguiente si aplica
   - Configurar promociones especiales
   - Verificar que sistema de monitoreo est√© activo

## Procedimientos de Emergencia

### Corte de Internet
1. **Modo Sin Conexi√≥n**:
   - Sistema contin√∫a funcionando localmente
   - √ìrdenes se guardan para sincronizar despu√©s
   - Pagos con tarjeta no disponibles temporalmente

2. **Procedimiento**:
   - Informar a garzones sobre limitaci√≥n de pagos
   - Continuar con efectivo y transferencias manuales
   - Sincronizar cuando se restablezca conexi√≥n

### Falla del Sistema Principal
1. **Backup de Emergencia**:
   - Usar tablets o celulares como respaldo
   - Tomar √≥rdenes manualmente en papel
   - Ingresar al sistema cuando se restablezca

2. **Contacto de Soporte**:
   - Tel√©fono: +56 2 2345 6789
   - Email: soporte@dysapoint.com
   - WhatsApp: +56 9 8765 4321

### Problema con Impresoras
1. **Impresora de Comandas**:
   - Verificar conexi√≥n USB
   - Reiniciar impresora
   - Usar impresora de respaldo si est√° disponible

2. **Impresora de Tickets**:
   - Verificar papel t√©rmico
   - Limpiar cabezal de impresi√≥n
   - Generar tickets manualmente como √∫ltimo recurso

## Indicadores de Rendimiento (KPIs)

### M√©tricas Diarias a Monitorear
- **Tiempo promedio de servicio por mesa**
- **Tickets promedio por mesa**
- **Productos m√°s vendidos**
- **Rendimiento por garz√≥n**
- **Satisfacci√≥n del cliente** (si se implementa sistema de rating)

### Metas Operativas
- Tiempo servicio: < 45 minutos por mesa
- Accuracy √≥rdenes: > 95%
- Uptime sistema: > 99%
- Tiempo respuesta: < 2 segundos
`;
    }

    async generarDocumentacionAPI(configuracion) {
        return `
## API Reference - DYSA Point POS v2.0.14

### Autenticaci√≥n

Todas las APIs requieren autenticaci√≥n mediante JWT token.

\`\`\`bash
# Obtener token de autenticaci√≥n
POST /api/auth/login
Content-Type: application/json

{
  "email": "admin@restaurante.com",
  "password": "password123"
}
\`\`\`

Response:
\`\`\`json
{
  "success": true,
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "id": 1,
    "email": "admin@restaurante.com",
    "role": "admin"
  }
}
\`\`\`

### Headers Requeridos
\`\`\`
Authorization: Bearer <token>
Content-Type: application/json
\`\`\`

## APIs de Ventas

### Obtener Ventas
\`\`\`http
GET /api/ventas?fecha=2025-01-15&estado=abierta
\`\`\`

### Crear Nueva Venta
\`\`\`http
POST /api/ventas
{
  "mesa": 5,
  "garzon": "GAR001",
  "productos": [
    {
      "id_complementog": 1,
      "cantidad": 2,
      "precio_unitario": 8500,
      "observaciones": "Sin cebolla"
    }
  ]
}
\`\`\`

### Agregar Productos a Venta
\`\`\`http
POST /api/ventas/{id_venta}/productos
{
  "productos": [
    {
      "id_complementog": 5,
      "cantidad": 1,
      "precio_unitario": 3200
    }
  ]
}
\`\`\`

### Cerrar Venta
\`\`\`http
PUT /api/ventas/{id_venta}/cerrar
{
  "metodo_pago": "efectivo",
  "monto_pagado": 15000,
  "descuentos": 0
}
\`\`\`

## APIs de Mesas

### Obtener Estado de Mesas
\`\`\`http
GET /api/mesas
\`\`\`

Response:
\`\`\`json
{
  "success": true,
  "mesas": [
    {
      "numero": 1,
      "capacidad": 4,
      "estado": "disponible",
      "zona": "terraza",
      "venta_activa": null
    },
    {
      "numero": 2,
      "capacidad": 2,
      "estado": "ocupada",
      "zona": "salon",
      "venta_activa": {
        "id": 123,
        "total": 25600,
        "tiempo_transcurrido": "00:45:30"
      }
    }
  ]
}
\`\`\`

### Abrir Mesa
\`\`\`http
POST /api/mesas/{numero}/abrir
{
  "comensales": 4,
  "garzon": "GAR001",
  "observaciones": "Mesa preferencial"
}
\`\`\`

### Liberar Mesa
\`\`\`http
POST /api/mesas/{numero}/liberar
\`\`\`

## APIs de Productos

### Obtener Men√∫ Completo
\`\`\`http
GET /api/productos/menu
\`\`\`

### Obtener Producto por ID
\`\`\`http
GET /api/productos/{id}
\`\`\`

### Buscar Productos
\`\`\`http
GET /api/productos/buscar?q=hamburguesa&categoria=platos_principales
\`\`\`

## APIs de Cocina (Bloques)

### Obtener √ìrdenes por Bloque
\`\`\`http
GET /api/cocina/bloques/{bloque_id}/ordenes
\`\`\`

### Marcar Producto como Listo
\`\`\`http
PUT /api/cocina/ordenes/{id_linea}/listo
{
  "tiempo_preparacion": 15,
  "observaciones": "Producto listo para servir"
}
\`\`\`

### Obtener Estad√≠sticas de Cocina
\`\`\`http
GET /api/cocina/estadisticas?fecha=2025-01-15
\`\`\`

## APIs de Aparcar Ventas

### Aparcar Venta
\`\`\`http
POST /api/aparcar/{id_venta}
{
  "motivo": "Cambio de turno",
  "observaciones": "Cliente solicita continuar m√°s tarde"
}
\`\`\`

### Recuperar Venta Aparcada
\`\`\`http
POST /api/aparcar/{id_venta}/recuperar
{
  "nuevo_garzon": "GAR002"
}
\`\`\`

### Listar Ventas Aparcadas
\`\`\`http
GET /api/aparcar/listar
\`\`\`

## APIs de Pre-tickets

### Generar Pre-ticket
\`\`\`http
POST /api/pretickets/generar
{
  "id_venta": 123,
  "tipo": "preview",
  "incluir_total": true
}
\`\`\`

### Confirmar Pre-ticket
\`\`\`http
POST /api/pretickets/{id}/confirmar
\`\`\`

### Obtener Pre-ticket
\`\`\`http
GET /api/pretickets/{id}
\`\`\`

## APIs de Tarifas

### Obtener Tarifas Activas
\`\`\`http
GET /api/tarifas/activas
\`\`\`

### Aplicar Tarifa Espec√≠fica
\`\`\`http
POST /api/tarifas/aplicar
{
  "id_venta": 123,
  "id_tarifa": 2,
  "productos": [1, 3, 5]
}
\`\`\`

### Obtener Historial de Tarifas
\`\`\`http
GET /api/tarifas/historial?fecha_desde=2025-01-01&fecha_hasta=2025-01-31
\`\`\`

## APIs de Backup

### Ejecutar Backup Manual
\`\`\`http
POST /api/backup/ejecutar
{
  "incluir_configuracion": true,
  "compresion": 9
}
\`\`\`

### Obtener Lista de Backups
\`\`\`http
GET /api/backup/archivos
\`\`\`

### Descargar Backup
\`\`\`http
GET /api/backup/descargar/{archivo}
\`\`\`

### Restaurar desde Backup
\`\`\`http
POST /api/backup/restaurar/{archivo}
{
  "confirmar": true,
  "backup_previo": true
}
\`\`\`

## APIs de Monitoreo

### Obtener Estad√≠sticas del Sistema
\`\`\`http
GET /api/monitoreo/estadisticas
\`\`\`

### Obtener M√©tricas Espec√≠ficas
\`\`\`http
GET /api/monitoreo/metricas/cpu
GET /api/monitoreo/metricas/memoria
GET /api/monitoreo/metricas/disco
\`\`\`

### Dashboard de Monitoreo
\`\`\`http
GET /api/monitoreo/dashboard
\`\`\`

## APIs de Configuraci√≥n

### Obtener Configuraci√≥n Actual
\`\`\`http
GET /api/configuracion/estado
\`\`\`

### Actualizar Configuraci√≥n
\`\`\`http
PUT /api/configuracion/actualizar/general
{
  "nombre_restaurante": "El Nuevo Sabor",
  "tipo_restaurante": "casual",
  "moneda": "CLP"
}
\`\`\`

### Ejecutar Configuraci√≥n Inicial
\`\`\`http
POST /api/configuracion/configurar
{
  "tipo_restaurante": "fino",
  "datos_basicos": {
    "nombre": "Restaurante Gourmet",
    "email": "contacto@gourmet.com"
  }
}
\`\`\`

## C√≥digos de Estado HTTP

- **200**: Operaci√≥n exitosa
- **201**: Recurso creado exitosamente
- **400**: Solicitud inv√°lida
- **401**: No autorizado (token inv√°lido)
- **403**: Prohibido (permisos insuficientes)
- **404**: Recurso no encontrado
- **429**: Demasiadas solicitudes (rate limit)
- **500**: Error interno del servidor

## Rate Limiting

Las APIs tienen diferentes l√≠mites seg√∫n la operaci√≥n:

- **APIs de consulta**: 100 req/min
- **APIs de transacciones**: 50 req/min
- **APIs de configuraci√≥n**: 10 req/min
- **APIs de backup**: 5 req/min

## Webhooks

El sistema puede enviar notificaciones a URLs externas:

### Configurar Webhook
\`\`\`http
POST /api/webhooks/configurar
{
  "url": "https://mi-sistema.com/webhook",
  "eventos": ["venta_completada", "error_sistema"],
  "secreto": "mi_secreto_webhook"
}
\`\`\`

### Eventos Disponibles
- \`venta_completada\`: Cuando se cierra una venta
- \`error_sistema\`: Errores cr√≠ticos del sistema
- \`backup_completado\`: Backup exitoso
- \`alerta_recursos\`: Alertas de CPU/memoria/disco

## SDKs y Ejemplos

### JavaScript/Node.js
\`\`\`javascript
const DysaPointAPI = require('dysa-point-sdk');

const api = new DysaPointAPI({
  baseURL: 'http://localhost:8547',
  token: 'your-jwt-token'
});

// Crear nueva venta
const venta = await api.ventas.crear({
  mesa: 5,
  productos: [
    { id_complementog: 1, cantidad: 2 }
  ]
});

// Obtener estado de mesas
const mesas = await api.mesas.obtener();
\`\`\`

### Python
\`\`\`python
import requests

class DysaPointAPI:
    def __init__(self, base_url, token):
        self.base_url = base_url
        self.headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }

    def crear_venta(self, data):
        response = requests.post(
            f'{self.base_url}/api/ventas',
            json=data,
            headers=self.headers
        )
        return response.json()

# Uso
api = DysaPointAPI('http://localhost:8547', 'your-token')
venta = api.crear_venta({
    'mesa': 5,
    'productos': [{'id_complementog': 1, 'cantidad': 2}]
})
\`\`\`

### cURL Examples
\`\`\`bash
# Crear venta
curl -X POST http://localhost:8547/api/ventas \\
  -H "Authorization: Bearer your-token" \\
  -H "Content-Type: application/json" \\
  -d '{"mesa": 5, "productos": [{"id_complementog": 1, "cantidad": 2}]}'

# Obtener mesas
curl -X GET http://localhost:8547/api/mesas \\
  -H "Authorization: Bearer your-token"
\`\`\`
`;
    }

    async generarTroubleshooting(configuracion) {
        return `
## Problemas Comunes y Soluciones

### Problemas de Conectividad

#### Sistema no carga / P√°gina en blanco
**S√≠ntomas**:
- Navegador muestra p√°gina en blanco
- Mensaje "No se puede conectar"
- Loading infinito

**Diagn√≥stico**:
1. Verificar que el servidor est√© ejecut√°ndose:
   \`\`\`bash
   # En Windows
   tasklist | findstr node

   # En Linux
   ps aux | grep node
   \`\`\`

2. Verificar puerto 8547:
   \`\`\`bash
   netstat -tlnp | grep 8547
   \`\`\`

**Soluciones**:
1. **Reiniciar servidor**:
   \`\`\`bash
   # Ir al directorio del sistema
   cd E:\\POS SYSME\\POS_MISTURA\\electron-app

   # Reiniciar servidor
   node server.js
   \`\`\`

2. **Verificar logs de error**:
   \`\`\`bash
   # Ver logs recientes
   tail -n 50 logs/error.log
   \`\`\`

3. **Limpiar cach√© del navegador**:
   - Presionar Ctrl+F5 para refrescar forzado
   - Limpiar cach√© y cookies del navegador

#### Error de conexi√≥n a base de datos
**S√≠ntomas**:
- Mensaje "Database connection failed"
- Errores al cargar mesas o productos
- Sistema se carga pero no muestra datos

**Diagn√≥stico**:
1. Verificar servicio MySQL:
   \`\`\`bash
   # Windows
   sc query mysql80

   # Linux
   systemctl status mysql
   \`\`\`

2. Probar conexi√≥n manual:
   \`\`\`bash
   mysql -u dysa_user -p dysa_point
   \`\`\`

**Soluciones**:
1. **Reiniciar MySQL**:
   \`\`\`bash
   # Windows
   net stop mysql80
   net start mysql80

   # Linux
   sudo systemctl restart mysql
   \`\`\`

2. **Verificar credenciales**:
   - Revisar archivo \`config/database.json\`
   - Verificar usuario y contrase√±a
   - Verificar permisos de base de datos

3. **Restaurar base de datos desde backup**:
   \`\`\`bash
   # Listar backups disponibles
   curl http://localhost:8547/api/backup/archivos

   # Restaurar √∫ltimo backup
   curl -X POST http://localhost:8547/api/backup/restaurar/[archivo]
   \`\`\`

### Problemas de Rendimiento

#### Sistema lento / Respuestas tard√≠as
**S√≠ntomas**:
- Demora al cargar mesas
- Lentitud al procesar √≥rdenes
- Timeout en operaciones

**Diagn√≥stico**:
1. Verificar uso de recursos:
   \`\`\`bash
   # Ver estad√≠sticas del sistema
   curl http://localhost:8547/api/monitoreo/estadisticas
   \`\`\`

2. Verificar memoria disponible:
   \`\`\`bash
   # Windows
   wmic OS get TotalVisibleMemorySize,FreePhysicalMemory /format:table

   # Linux
   free -h
   \`\`\`

**Soluciones**:
1. **Cerrar aplicaciones innecesarias**:
   - Cerrar pesta√±as del navegador no utilizadas
   - Cerrar programas que consuman memoria

2. **Reiniciar sistema**:
   - Si persiste la lentitud, reiniciar completamente
   - Verificar que sistema inicie autom√°ticamente

3. **Optimizar base de datos**:
   \`\`\`sql
   -- Conectar a MySQL y ejecutar
   OPTIMIZE TABLE ventadirecta;
   OPTIMIZE TABLE ventadir_comg;
   OPTIMIZE TABLE mesa;
   \`\`\`

#### High CPU / Memoria alta
**S√≠ntomas**:
- Sistema operativo lento
- Ventiladores trabajando constantemente
- Alertas de monitoreo

**Diagn√≥stico**:
\`\`\`bash
# Ver procesos que m√°s consumen
top -o %CPU

# En Windows
tasklist /fo table | sort /r /+5
\`\`\`

**Soluciones**:
1. **Identificar proceso problem√°tico**
2. **Reiniciar servicio espec√≠fico**
3. **Contactar soporte si persiste**

### Problemas de Impresi√≥n

#### Comandas no imprimen
**S√≠ntomas**:
- √ìrdenes no salen en impresora de cocina
- Mensaje "Error de impresi√≥n"
- Impresora no responde

**Diagn√≥stico**:
1. Verificar conexi√≥n f√≠sica:
   - Cable USB conectado firmemente
   - Impresora encendida
   - LED de estado verde

2. Verificar en sistema operativo:
   \`\`\`bash
   # Windows - Ver impresoras instaladas
   wmic printer list brief

   # Linux - Ver impresoras
   lpstat -p
   \`\`\`

**Soluciones**:
1. **Reiniciar impresora**:
   - Apagar por 10 segundos
   - Encender y esperar inicializaci√≥n completa

2. **Verificar papel**:
   - Papel t√©rmico instalado correctamente
   - Sin atascos de papel
   - Suficiente papel en rollo

3. **Reinstalar driver**:
   - Desinstalar impresora del sistema
   - Reinstalar con drivers del fabricante

4. **Configurar en DYSA Point**:
   - Ir a Configuraci√≥n > Impresoras
   - Verificar impresora seleccionada
   - Realizar impresi√≥n de prueba

#### Tickets salen cortados o ilegibles
**S√≠ntomas**:
- Texto cortado en los bordes
- Caracteres ilegibles
- Formato incorrecto

**Soluciones**:
1. **Ajustar configuraci√≥n de papel**:
   - Verificar ancho de papel en configuraci√≥n
   - Ajustar m√°rgenes de impresi√≥n

2. **Limpiar cabezal**:
   - Usar tarjeta de limpieza espec√≠fica
   - Limpiar con alcohol isoprop√≠lico

3. **Verificar calidad de papel**:
   - Usar papel t√©rmico de calidad
   - Verificar fecha de caducidad del papel

### Problemas de Operaci√≥n

#### Mesa no se puede cerrar
**S√≠ntomas**:
- Bot√≥n "Cerrar Mesa" no responde
- Error al procesar pago
- Mesa permanece "Ocupada"

**Diagn√≥stico**:
1. Verificar estado de la venta:
   \`\`\`bash
   # Obtener detalles de la mesa
   curl http://localhost:8547/api/mesas/[numero]
   \`\`\`

2. Verificar productos pendientes en cocina

**Soluciones**:
1. **Forzar cierre de mesa**:
   - Acceder como administrador
   - Ir a "Gesti√≥n de Mesas"
   - Seleccionar "Forzar Cierre"

2. **Verificar conexi√≥n de pago**:
   - Para pagos con tarjeta, verificar terminal
   - Para efectivo, proceder normalmente

3. **Contactar soporte** si persiste

#### Productos no aparecen en men√∫
**S√≠ntomas**:
- Men√∫ vac√≠o o incompleto
- Productos espec√≠ficos no cargan
- Precios incorrectos

**Diagn√≥stico**:
\`\`\`bash
# Verificar productos en base de datos
curl http://localhost:8547/api/productos/menu
\`\`\`

**Soluciones**:
1. **Refrescar cach√©**:
   - Presionar F5 en el navegador
   - O reiniciar sesi√≥n

2. **Verificar base de datos**:
   \`\`\`sql
   SELECT COUNT(*) FROM complementog WHERE activo = 1;
   \`\`\`

3. **Restaurar productos desde backup** si es necesario

#### C√≥digos de garz√≥n no funcionan
**S√≠ntomas**:
- "C√≥digo inv√°lido" al intentar login
- Garz√≥n no puede acceder al sistema

**Soluciones**:
1. **Verificar c√≥digo**:
   - Confirmar c√≥digo de 4 d√≠gitos
   - Verificar que est√© activo en sistema

2. **Resetear c√≥digo**:
   - Acceder como administrador
   - Ir a "Gesti√≥n de Usuarios"
   - Generar nuevo c√≥digo para garz√≥n

3. **Verificar permisos**:
   - Confirmar que garz√≥n tenga permisos activos
   - Verificar horario de trabajo asignado

### Problemas de Backup

#### Backup autom√°tico falla
**S√≠ntomas**:
- Notificaciones de backup fallido
- No se generan archivos de backup
- Espacio en disco insuficiente

**Diagn√≥stico**:
\`\`\`bash
# Verificar estado del backup
curl http://localhost:8547/api/backup/estadisticas
\`\`\`

**Soluciones**:
1. **Verificar espacio en disco**:
   \`\`\`bash
   # Windows
   dir C:\\ | find "bytes free"

   # Linux
   df -h
   \`\`\`

2. **Limpiar backups antiguos**:
   - Eliminar backups de m√°s de 30 d√≠as
   - Configurar retenci√≥n autom√°tica

3. **Ejecutar backup manual**:
   \`\`\`bash
   curl -X POST http://localhost:8547/api/backup/ejecutar
   \`\`\`

### Contacto de Soporte T√©cnico

#### Informaci√≥n a Proveer
Cuando contacte soporte, tenga lista la siguiente informaci√≥n:

1. **Informaci√≥n del Sistema**:
   - Versi√≥n: DYSA Point POS v2.0.14
   - Sistema operativo y versi√≥n
   - Navegador utilizado

2. **Descripci√≥n del Problema**:
   - Cu√°ndo ocurri√≥
   - Pasos para reproducir
   - Mensajes de error exactos

3. **Logs del Sistema**:
   \`\`\`bash
   # Generar reporte de diagn√≥stico
   curl http://localhost:8547/api/monitoreo/diagnostico > diagnostico.txt
   \`\`\`

#### Canales de Soporte

**Soporte T√©cnico 24/7**:
- **Tel√©fono**: +56 2 2345 6789
- **WhatsApp**: +56 9 8765 4321
- **Email**: soporte@dysapoint.com

**Soporte por Niveles**:
- **Nivel 1**: Problemas b√°sicos de operaci√≥n
- **Nivel 2**: Problemas t√©cnicos especializados
- **Nivel 3**: Problemas de infraestructura cr√≠tica

**Tiempo de Respuesta**:
- **Cr√≠tico**: 15 minutos
- **Alto**: 1 hora
- **Medio**: 4 horas
- **Bajo**: 24 horas

#### Acceso Remoto
En casos cr√≠ticos, soporte puede solicitar acceso remoto:

1. **TeamViewer**: ID y contrase√±a temporal
2. **SSH**: Para servidores Linux
3. **RDP**: Para servidores Windows

**Nota**: Nunca proporcionar credenciales permanentes
`;
    }

    async generarConfiguracionAvanzada(configuracion) {
        return `
## Configuraci√≥n Avanzada por Tipo de Restaurante

### Restaurante Casual

#### Caracter√≠sticas Principales
- Servicio r√°pido y eficiente
- Men√∫ variado con precios accesibles
- Alto volumen de clientes
- Rotaci√≥n r√°pida de mesas

#### Configuraciones Recomendadas

**Tiempo de Servicio**:
\`\`\`json
{
  "tiempo_maximo_mesa": 90,
  "alerta_tiempo_servicio": 60,
  "tiempo_promedio_preparacion": 15,
  "rotacion_objetivo": 1.5
}
\`\`\`

**Bloques de Cocina**:
- Bloque 1 (11:00-14:30): Almuerzo intensivo
- Bloque 2 (14:30-17:00): Tarde relajada
- Bloque 3 (17:00-20:30): Cena temprana
- Bloque 4 (20:30-23:00): Cena tard√≠a

**Tarifas Autom√°ticas**:
\`\`\`json
{
  "hora_feliz": {
    "horario": "15:00-18:00",
    "descuento": 20,
    "productos": ["bebidas", "aperitivos"]
  },
  "menu_ejecutivo": {
    "horario": "12:00-15:00",
    "precio_fijo": 7500,
    "incluye": ["entrada", "plato_principal", "postre", "bebida"]
  }
}
\`\`\`

### Restaurante Fino

#### Caracter√≠sticas Principales
- Servicio premium personalizado
- Men√∫ gourmet con ingredientes selectos
- Experiencia gastron√≥mica completa
- Tiempo extendido por mesa

#### Configuraciones Recomendadas

**Tiempo de Servicio**:
\`\`\`json
{
  "tiempo_maximo_mesa": 180,
  "alerta_tiempo_servicio": 120,
  "tiempo_promedio_preparacion": 30,
  "servicio_personalizado": true
}
\`\`\`

**Reservas Avanzadas**:
\`\`\`json
{
  "reservas_requeridas": true,
  "anticipacion_minima": 24,
  "confirmacion_automatica": false,
  "mesas_vip": [1, 2, 3, 15, 16]
}
\`\`\`

**Men√∫s Especiales**:
\`\`\`json
{
  "menu_degustacion": {
    "tiempo_estimado": 150,
    "precio": 45000,
    "maridaje_incluido": true
  },
  "carta_vinos": {
    "categorias": ["espumantes", "blancos", "tintos", "premium"],
    "servicio_sommelier": true
  }
}
\`\`\`

### Restaurante de Comida R√°pida

#### Caracter√≠sticas Principales
- Servicio ultra r√°pido
- Men√∫ estandarizado
- Alto volumen de transacciones
- M√∫ltiples canales de venta

#### Configuraciones Recomendadas

**Tiempo de Servicio**:
\`\`\`json
{
  "tiempo_maximo_preparacion": 8,
  "alerta_demora": 10,
  "objetivo_servicio": 5,
  "auto_alerta_cocina": true
}
\`\`\`

**Modalidades de Servicio**:
\`\`\`json
{
  "para_llevar": true,
  "delivery": true,
  "autoservicio": true,
  "drive_through": true
}
\`\`\`

**Combos y Promociones**:
\`\`\`json
{
  "combos_automaticos": true,
  "upselling_inteligente": true,
  "promociones_tiempo_real": true,
  "descuentos_volumen": true
}
\`\`\`

### Bar/Pub

#### Caracter√≠sticas Principales
- Enfoque en bebidas y aperitivos
- Ambiente nocturno
- M√∫sica y entretenimiento
- Mesas altas y barra

#### Configuraciones Recomendadas

**Horarios Especiales**:
\`\`\`json
{
  "happy_hour": {
    "horario": "17:00-20:00",
    "descuento_bebidas": 30,
    "aperitivos_gratis": true
  },
  "horario_nocturno": {
    "inicio": "20:00",
    "fin": "02:00",
    "precio_nocturno": true
  }
}
\`\`\`

**Gesti√≥n de Barra**:
\`\`\`json
{
  "servicio_barra": true,
  "orden_directa_barra": true,
  "control_edad": true,
  "limite_alcohol": true
}
\`\`\`

**Entretenimiento**:
\`\`\`json
{
  "reserva_mesas_eventos": true,
  "cover_musical": 5000,
  "descuento_cumpleanos": 20
}
\`\`\`

### Cafeter√≠a

#### Caracter√≠sticas Principales
- Ambiente relajado
- Productos de panader√≠a y caf√©
- Servicio durante todo el d√≠a
- Trabajo y estudio friendly

#### Configuraciones Recomendadas

**Productos Especiales**:
\`\`\`json
{
  "cafe_especialidad": true,
  "productos_panaderia": true,
  "opciones_veganas": true,
  "wifi_gratuito": true
}
\`\`\`

**Horarios Extendidos**:
\`\`\`json
{
  "desayuno": "06:00-11:00",
  "almuerzo_ligero": "11:00-16:00",
  "once": "16:00-19:00",
  "cena_ligera": "19:00-22:00"
}
\`\`\`

## Configuraci√≥n de Hardware por Tipo

### Especificaciones M√≠nimas por Tipo

#### Restaurante Casual
\`\`\`yaml
CPU: Intel i3 / AMD Ryzen 3
RAM: 8 GB
Almacenamiento: 250 GB SSD
Impresoras: 2 (cocina + tickets)
Terminales: 2-3 POS
Red: 100 Mbps
\`\`\`

#### Restaurante Fino
\`\`\`yaml
CPU: Intel i5 / AMD Ryzen 5
RAM: 16 GB
Almacenamiento: 500 GB SSD
Impresoras: 3 (cocina + bar + tickets)
Terminales: 3-4 POS + tablets
Red: 200 Mbps
Backup: NAS dedicado
\`\`\`

#### Comida R√°pida
\`\`\`yaml
CPU: Intel i5 / AMD Ryzen 5
RAM: 16 GB
Almacenamiento: 1 TB SSD
Impresoras: 4+ (m√∫ltiples estaciones)
Terminales: 6+ POS
Red: 300 Mbps
Redundancia: Servidor backup
\`\`\`

## Configuraci√≥n de Base de Datos

### Par√°metros de Rendimiento por Tipo

#### Para Alto Volumen (Comida R√°pida)
\`\`\`sql
-- Configuraci√≥n MySQL optimizada
SET GLOBAL innodb_buffer_pool_size = 2147483648; -- 2GB
SET GLOBAL innodb_log_file_size = 268435456; -- 256MB
SET GLOBAL max_connections = 200;
SET GLOBAL query_cache_size = 67108864; -- 64MB
SET GLOBAL innodb_flush_log_at_trx_commit = 2;
\`\`\`

#### Para Servicio Premium (Restaurante Fino)
\`\`\`sql
-- Configuraci√≥n balanceada para consistencia
SET GLOBAL innodb_buffer_pool_size = 1073741824; -- 1GB
SET GLOBAL max_connections = 100;
SET GLOBAL innodb_flush_log_at_trx_commit = 1; -- M√°xima consistencia
SET GLOBAL sync_binlog = 1;
\`\`\`

### √çndices Especializados

#### Para Reportes Avanzados
\`\`\`sql
-- √çndices para restaurantes finos con reportes detallados
CREATE INDEX idx_ventas_fecha_mesa ON ventadirecta(fecha, Num_Mesa);
CREATE INDEX idx_productos_categoria ON complementog(categoria, activo);
CREATE INDEX idx_ventas_garzon_fecha ON ventadirecta(garzon, fecha);
\`\`\`

#### Para Alto Volumen
\`\`\`sql
-- √çndices optimizados para velocidad
CREATE INDEX idx_ventas_rapidas ON ventadirecta(fecha, cerrada);
CREATE INDEX idx_productos_activos ON complementog(activo, categoria);
\`\`\`

## Configuraci√≥n de Monitoreo

### Umbrales por Tipo de Restaurante

#### Restaurante Casual
\`\`\`json
{
  "cpu_alerta": 70,
  "memoria_alerta": 75,
  "disco_alerta": 80,
  "tiempo_respuesta_max": 3000,
  "transacciones_por_minuto": 30
}
\`\`\`

#### Comida R√°pida
\`\`\`json
{
  "cpu_alerta": 80,
  "memoria_alerta": 85,
  "disco_alerta": 85,
  "tiempo_respuesta_max": 1000,
  "transacciones_por_minuto": 120
}
\`\`\`

#### Restaurante Fino
\`\`\`json
{
  "cpu_alerta": 60,
  "memoria_alerta": 70,
  "disco_alerta": 75,
  "tiempo_respuesta_max": 2000,
  "transacciones_por_minuto": 15,
  "monitoreo_personalizado": true
}
\`\`\`

## Configuraci√≥n de Seguridad

### Niveles de Acceso por Tipo

#### Configuraci√≥n B√°sica (Restaurante Casual)
\`\`\`json
{
  "autenticacion": "simple",
  "sesiones_simultaneas": 3,
  "timeout_sesion": 8,
  "backup_frecuencia": 6,
  "logs_retencion": 30
}
\`\`\`

#### Configuraci√≥n Avanzada (Restaurante Fino)
\`\`\`json
{
  "autenticacion": "2fa_opcional",
  "sesiones_simultaneas": 5,
  "timeout_sesion": 12,
  "backup_frecuencia": 3,
  "logs_retencion": 90,
  "auditoria_avanzada": true,
  "cifrado_datos": true
}
\`\`\`

## Configuraci√≥n de Impresi√≥n

### Estaciones de Impresi√≥n por Tipo

#### Restaurante Completo
\`\`\`json
{
  "estaciones": {
    "cocina_caliente": {
      "impresora": "EPSON TM-T88VI",
      "productos": ["platos_principales", "guarniciones"]
    },
    "cocina_fria": {
      "impresora": "EPSON TM-T82",
      "productos": ["ensaladas", "aperitivos"]
    },
    "bar": {
      "impresora": "STAR TSP143III",
      "productos": ["bebidas", "tragos"]
    },
    "caja": {
      "impresora": "EPSON TM-T20III",
      "tipo": "tickets_pago"
    }
  }
}
\`\`\`

## Configuraci√≥n de APIs

### Rate Limiting por Tipo

#### Configuraci√≥n Diferenciada
\`\`\`json
{
  "casual": {
    "ventas": 100,
    "consultas": 200,
    "reportes": 20
  },
  "fino": {
    "ventas": 50,
    "consultas": 100,
    "reportes": 50
  },
  "rapido": {
    "ventas": 300,
    "consultas": 500,
    "reportes": 10
  }
}
\`\`\`

## Optimizaciones Espec√≠ficas

### Cache por Tipo de Restaurante

#### Alto Volumen
\`\`\`json
{
  "cache_productos": 300,
  "cache_mesas": 30,
  "cache_precios": 600,
  "cache_promociones": 60
}
\`\`\`

#### Servicio Premium
\`\`\`json
{
  "cache_productos": 60,
  "cache_mesas": 10,
  "cache_personalizacion": 300,
  "cache_reportes": 1800
}
\`\`\`

## Configuraci√≥n de Backup

### Estrategias por Tipo

#### Cr√≠tico (Comida R√°pida)
\`\`\`json
{
  "frecuencia": "cada_2_horas",
  "retencion": 90,
  "backup_incremental": true,
  "backup_remoto": true,
  "verificacion_integridad": true
}
\`\`\`

#### Est√°ndar (Restaurante Casual)
\`\`\`json
{
  "frecuencia": "cada_6_horas",
  "retencion": 30,
  "backup_incremental": false,
  "backup_remoto": false,
  "verificacion_integridad": false
}
\`\`\`

## Procedimientos de Mantenimiento

### Calendarios por Tipo

#### Restaurante de Alto Volumen
- **Diario**: Verificaci√≥n de logs, limpieza de cach√©
- **Semanal**: Optimizaci√≥n de BD, verificaci√≥n de backups
- **Mensual**: Actualizaci√≥n de software, auditor√≠a de seguridad
- **Trimestral**: Revisi√≥n completa de hardware

#### Restaurante Est√°ndar
- **Diario**: Backup autom√°tico
- **Semanal**: Limpieza de logs
- **Mensual**: Optimizaci√≥n de BD
- **Semestral**: Revisi√≥n de hardware

## Configuraci√≥n Multi-sucursal

### Para Cadenas de Restaurantes

#### Configuraci√≥n Central
\`\`\`json
{
  "servidor_central": "192.168.1.100",
  "sincronizacion": "tiempo_real",
  "reportes_consolidados": true,
  "usuarios_centralizados": true,
  "configuracion_distribuida": true
}
\`\`\`

#### Configuraci√≥n por Sucursal
\`\`\`json
{
  "sucursal_id": "SUCURSAL_001",
  "tipo_restaurante": "casual",
  "servidor_local": "192.168.1.10",
  "modo_autonomo": true,
  "sincronizacion_horaria": "23:00"
}
\`\`\`
`;
    }

    async aplicarPlantilla(contenido, configuracion, tipoInfo) {
        const fecha = new Date().toLocaleDateString('es-CL');
        let plantillaCompleta = this.plantillasBase.header + contenido + this.plantillasBase.footer;

        // Reemplazar variables
        plantillaCompleta = plantillaCompleta
            .replace(/\{titulo\}/g, tipoInfo.nombre)
            .replace(/\{fecha\}/g, fecha)
            .replace(/\{tipo_restaurante\}/g, configuracion.tipo_restaurante)
            .replace(/\{idioma\}/g, configuracion.idioma)
            .replace(/\{version\}/g, '2.0.14');

        return plantillaCompleta;
    }

    async exportarDocumento(documento, formato, configuracion) {
        const filename = `${documento.tipo}-${configuracion.tipo_restaurante}-${configuracion.idioma}-${Date.now()}`;
        const outputDir = path.join(this.outputPath, formato);

        switch (formato) {
            case 'markdown':
                await this.exportarMarkdown(documento, filename, outputDir);
                break;
            case 'html':
                await this.exportarHTML(documento, filename, outputDir);
                break;
            case 'pdf':
                await this.exportarPDF(documento, filename, outputDir);
                break;
            case 'word':
                await this.exportarWord(documento, filename, outputDir);
                break;
        }

        return path.join(outputDir, `${filename}.${formato === 'word' ? 'docx' : formato}`);
    }

    async exportarMarkdown(documento, filename, outputDir) {
        const filepath = path.join(outputDir, `${filename}.md`);
        await fs.writeFile(filepath, documento.contenido);
    }

    async exportarHTML(documento, filename, outputDir) {
        const html = marked.parse(documento.contenido);
        const htmlCompleto = `
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${documento.titulo}</title>
    <style>
        body { font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
        h1, h2, h3 { color: #2c3e50; }
        code { background: #f4f4f4; padding: 2px 4px; border-radius: 3px; }
        pre { background: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .header { border-bottom: 2px solid #3498db; margin-bottom: 20px; }
        .footer { border-top: 1px solid #ccc; margin-top: 40px; padding-top: 20px; font-size: 0.9em; color: #666; }
    </style>
</head>
<body>
    ${html}
</body>
</html>`;

        const filepath = path.join(outputDir, `${filename}.html`);
        await fs.writeFile(filepath, htmlCompleto);
    }

    async exportarPDF(documento, filename, outputDir) {
        try {
            const browser = await puppeteer.launch({ headless: true });
            const page = await browser.newPage();

            // Primero generar HTML
            const htmlContent = marked.parse(documento.contenido);
            const htmlCompleto = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; margin: 20px; }
        h1, h2, h3 { color: #2c3e50; page-break-after: avoid; }
        code { background: #f4f4f4; padding: 2px 4px; }
        pre { background: #f4f4f4; padding: 10px; page-break-inside: avoid; }
        table { border-collapse: collapse; width: 100%; page-break-inside: avoid; }
        th, td { border: 1px solid #ddd; padding: 8px; }
        .page-break { page-break-before: always; }
    </style>
</head>
<body>${htmlContent}</body>
</html>`;

            await page.setContent(htmlCompleto);

            const filepath = path.join(outputDir, `${filename}.pdf`);
            await page.pdf({
                path: filepath,
                format: 'A4',
                margin: {
                    top: '20mm',
                    right: '20mm',
                    bottom: '20mm',
                    left: '20mm'
                },
                printBackground: true
            });

            await browser.close();
        } catch (error) {
            console.warn('‚ö†Ô∏è No se pudo generar PDF:', error.message);
            // Fallback: generar HTML en su lugar
            await this.exportarHTML(documento, filename, outputDir);
        }
    }

    async exportarWord(documento, filename, outputDir) {
        // Simplificado: generar HTML con extensi√≥n .docx para compatibilidad
        const filepath = path.join(outputDir, `${filename}.docx`);
        const htmlContent = marked.parse(documento.contenido);
        await fs.writeFile(filepath, htmlContent);
    }

    async generarScreenshots(configuracion) {
        console.log('üì∏ Generando screenshots del sistema...');
        let screenshotsCapturadas = 0;

        try {
            const browser = await puppeteer.launch({ headless: true });
            const page = await browser.newPage();
            await page.setViewport({ width: 1920, height: 1080 });

            const screenshots = [
                { url: 'http://localhost:8547/login', name: 'login' },
                { url: 'http://localhost:8547/dashboard', name: 'dashboard' },
                { url: 'http://localhost:8547/mesas', name: 'mapa-mesas' },
                { url: 'http://localhost:8547/menu', name: 'menu-productos' },
                { url: 'http://localhost:8547/reportes', name: 'reportes' }
            ];

            for (const screenshot of screenshots) {
                try {
                    await page.goto(screenshot.url, { waitUntil: 'networkidle2', timeout: 10000 });
                    const filepath = path.join(this.outputPath, 'screenshots', `${screenshot.name}.png`);
                    await page.screenshot({ path: filepath, fullPage: true });
                    screenshotsCapturadas++;
                } catch (error) {
                    console.warn(`‚ö†Ô∏è No se pudo capturar screenshot de ${screenshot.name}`);
                }
            }

            await browser.close();
        } catch (error) {
            console.warn('‚ö†Ô∏è Error generando screenshots:', error.message);
        }

        return screenshotsCapturadas;
    }

    async generarDiagramas(configuracion) {
        console.log('üìä Generando diagramas de arquitectura...');
        let diagramasCreados = 0;

        const diagramas = [
            {
                nombre: 'arquitectura-sistema',
                contenido: this.generarDiagramaArquitectura()
            },
            {
                nombre: 'flujo-ventas',
                contenido: this.generarDiagramaFlujoVentas()
            },
            {
                nombre: 'base-datos-erd',
                contenido: this.generarDiagramaBaseDatos()
            }
        ];

        for (const diagrama of diagramas) {
            try {
                const filepath = path.join(this.outputPath, 'diagramas', `${diagrama.nombre}.md`);
                await fs.writeFile(filepath, diagrama.contenido);
                diagramasCreados++;
            } catch (error) {
                console.warn(`‚ö†Ô∏è Error generando diagrama ${diagrama.nombre}:`, error.message);
            }
        }

        return diagramasCreados;
    }

    generarDiagramaArquitectura() {
        return `# Diagrama de Arquitectura del Sistema

\`\`\`mermaid
graph TB
    subgraph "Frontend"
        UI[Interfaz Web]
        MAP[Mapa Visual Mesas]
        MENU[Men√∫ Digital]
    end

    subgraph "Backend"
        API[API Server Node.js]
        AUTH[Autenticaci√≥n]
        ROUTES[Rutas Especializadas]
    end

    subgraph "Servicios"
        VENTAS[VentasManager]
        MESAS[MesasManager]
        COCINA[BloquesCocinaManager]
        BACKUP[BackupManager]
        MONITOR[MonitoreoManager]
    end

    subgraph "Base de Datos"
        MYSQL[(MySQL 8.0)]
        CACHE[Cache Redis]
    end

    subgraph "Impresi√≥n"
        PRINT_COCINA[Impresora Cocina]
        PRINT_TICKET[Impresora Tickets]
    end

    UI --> API
    MAP --> API
    MENU --> API

    API --> AUTH
    API --> ROUTES

    ROUTES --> VENTAS
    ROUTES --> MESAS
    ROUTES --> COCINA
    ROUTES --> BACKUP
    ROUTES --> MONITOR

    VENTAS --> MYSQL
    MESAS --> MYSQL
    COCINA --> MYSQL
    BACKUP --> MYSQL
    MONITOR --> MYSQL

    API --> CACHE

    COCINA --> PRINT_COCINA
    VENTAS --> PRINT_TICKET
\`\`\``;
    }

    generarDiagramaFlujoVentas() {
        return `# Diagrama de Flujo de Ventas

\`\`\`mermaid
flowchart TD
    START([Cliente llega]) --> MESA[Seleccionar Mesa]
    MESA --> ABRIR[Abrir Mesa]
    ABRIR --> ORDEN[Tomar Orden]
    ORDEN --> ENVIAR[Enviar a Cocina]
    ENVIAR --> PREPARAR[Preparar en Cocina]

    PREPARAR --> LISTO{¬øOrden Lista?}
    LISTO -->|No| PREPARAR
    LISTO -->|S√≠| SERVIR[Servir Mesa]

    SERVIR --> MAS{¬øM√°s productos?}
    MAS -->|S√≠| ORDEN
    MAS -->|No| CUENTA[Generar Cuenta]

    CUENTA --> PAGO[Procesar Pago]
    PAGO --> TICKET[Generar Ticket]
    TICKET --> CERRAR[Cerrar Mesa]
    CERRAR --> END([Fin])

    ORDEN --> APARCAR{¬øAparcar Venta?}
    APARCAR -->|S√≠| GUARDAR[Guardar Estado]
    GUARDAR --> RECUPERAR[Recuperar Despu√©s]
    RECUPERAR --> ORDEN
    APARCAR -->|No| ENVIAR
\`\`\``;
    }

    generarDiagramaBaseDatos() {
        return `# Diagrama Entidad-Relaci√≥n (ERD)

\`\`\`mermaid
erDiagram
    MESA {
        int Num_Mesa PK
        string descripcion
        int capacidad
        string zona
        boolean activa
        string estado
    }

    VENTADIRECTA {
        int id_venta PK
        int Num_Mesa FK
        string garzon
        datetime fecha
        float total
        string cerrada
        string metodo_pago
    }

    VENTADIR_COMG {
        int id_linea PK
        int id_venta FK
        int id_complementog FK
        int cantidad
        float precio_unitario
        string observaciones
        datetime hora_cocina
    }

    COMPLEMENTOG {
        int id_complementog PK
        string alias
        string nombre
        float precio
        string categoria
        boolean activo
    }

    USUARIOS {
        int id_usuario PK
        string email
        string password_hash
        string nombre
        string rol
        boolean activo
    }

    GARZONES {
        string codigo PK
        string nombre
        boolean activo
        datetime ultimo_acceso
    }

    MESA ||--o{ VENTADIRECTA : "tiene"
    VENTADIRECTA ||--o{ VENTADIR_COMG : "contiene"
    COMPLEMENTOG ||--o{ VENTADIR_COMG : "es_producto"
    USUARIOS ||--o{ VENTADIRECTA : "administra"
    GARZONES ||--o{ VENTADIRECTA : "atiende"
\`\`\``;
    }

    async crearPaqueteDocumentacion(configuracion, resultados) {
        console.log('üì¶ Creando paquete completo de documentaci√≥n...');

        const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');
        const paqueteNombre = `DYSA-Point-Docs-${configuracion.tipo_restaurante}-${timestamp}`;
        const paquetePath = path.join(this.outputPath, 'paquetes', `${paqueteNombre}.zip`);

        return new Promise((resolve, reject) => {
            const output = require('fs').createWriteStream(paquetePath);
            const archive = archiver('zip', { zlib: { level: 9 } });

            output.on('close', () => {
                console.log(`‚úÖ Paquete creado: ${archive.pointer()} bytes`);
                resolve(paquetePath);
            });

            archive.on('error', (err) => {
                reject(err);
            });

            archive.pipe(output);

            // Agregar todos los archivos generados
            archive.directory(path.join(this.outputPath, 'pdf'), 'pdf');
            archive.directory(path.join(this.outputPath, 'html'), 'html');
            archive.directory(path.join(this.outputPath, 'markdown'), 'markdown');
            archive.directory(path.join(this.outputPath, 'screenshots'), 'screenshots');
            archive.directory(path.join(this.outputPath, 'diagramas'), 'diagramas');

            // Agregar archivo de informaci√≥n del paquete
            const infoPackage = {
                nombre: paqueteNombre,
                version: '2.0.14',
                fecha_generacion: new Date().toISOString(),
                configuracion,
                resultados,
                contenido: {
                    documentos: resultados.documentos_generados.length,
                    screenshots: resultados.screenshots_capturadas,
                    diagramas: resultados.diagramas_creados,
                    formatos: resultados.formatos_exportados
                }
            };

            archive.append(JSON.stringify(infoPackage, null, 2), { name: 'package-info.json' });

            archive.finalize();
        });
    }

    async obtenerEstadisticas() {
        return {
            documentos_disponibles: Object.keys(this.tiposDocumentacion).length,
            formatos_soportados: this.configuracion.formatos.length,
            idiomas_soportados: this.configuracion.idiomas.length,
            tipos_restaurante: this.configuracion.tipos_restaurante.length,
            plantillas_cargadas: this.plantillasBase ? Object.keys(this.plantillasBase).length : 0,
            cache_activo: this.configuracion.cache.size,
            ultimo_uso: new Date()
        };
    }

    async actualizarConfiguracion(nuevaConfig) {
        this.configuracion = { ...this.configuracion, ...nuevaConfig };
        await this.guardarConfiguracion();
        this.emit('configuracion-actualizada', { nuevaConfig });
    }

    async limpiarArchivosAntiguos(dias = 30) {
        const limiteFecha = new Date();
        limiteFecha.setDate(limiteFecha.getDate() - dias);

        const directorios = [
            path.join(this.outputPath, 'pdf'),
            path.join(this.outputPath, 'html'),
            path.join(this.outputPath, 'markdown'),
            path.join(this.outputPath, 'paquetes')
        ];

        let archivosEliminados = 0;

        for (const directorio of directorios) {
            try {
                const archivos = await fs.readdir(directorio);

                for (const archivo of archivos) {
                    const archivoPath = path.join(directorio, archivo);
                    const stats = await fs.stat(archivoPath);

                    if (stats.mtime < limiteFecha) {
                        await fs.unlink(archivoPath);
                        archivosEliminados++;
                    }
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è Error limpiando directorio ${directorio}:`, error.message);
            }
        }

        console.log(`üßπ Limpieza completada: ${archivosEliminados} archivos eliminados`);
        return archivosEliminados;
    }

    async cleanup() {
        console.log('üßπ Limpiando DocumentacionTecnicaManager...');

        // Limpiar cache
        this.configuracion.cache.clear();
        this.plantillasBase = {};

        // Emitir evento de limpieza
        this.emit('sistema-limpio', { timestamp: new Date() });

        console.log('‚úÖ DocumentacionTecnicaManager limpio');
    }
}

module.exports = DocumentacionTecnicaManager;